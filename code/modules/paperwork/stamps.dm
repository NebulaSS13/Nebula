///Returns all stamp decl, with as key their names. If allow_restricted is true, restricted stamps will appear in the list.
/proc/get_stamps_types_by_name(var/allow_restricted = FALSE)
	var/list/stamps = decls_repository.get_decls_of_subtype(/decl/stamp_type)
	for(var/atype in stamps)
		var/decl/stamp_type/cur = stamps[atype]
		if(cur.is_restricted && !allow_restricted)
			continue
		LAZYSET(., capitalize(cur.get_stamp_display_name()), .[atype])
	return sortTim(., /proc/cmp_text_asc)

//////////////////////////////////////////////////////////////////////////////////
// Stamp Symbol Decl
//////////////////////////////////////////////////////////////////////////////////

///Represents each available unique stamps that may be used in the game. So we can easily apply each one with or without the actual stamp object.
/decl/stamp_type
	abstract_type = /decl/stamp_type
	///A unique name for identifying this stamp.
	var/name
	///The name of the entity this stamp represents. Used for stamps representing an individual. If null, will use name instead.
	var/owner_name
	///The attack verb list of the stamp
	var/list/attack_verbs = list("stamped")
	///A human readable name for the color of the stamp overlay. Mainly for describing the stamp.
	var/stamp_color_name = "grey"
	///The color applied to the stamp overlay during icon gen. If applicable. Otherwise is null.
	var/stamp_color
	///The icon state used for the stamp overlay.
	var/stamp_overlay_state = "stamp-circle"
	///The text applied to a document when it's been stamped. Null means autogenerated generic message.
	var/stamp_text
	///The stamp overlay generated for this stamp
	var/tmp/image/stamp_overlay
	///Whether this stamp is illegal to reproduce. If true, won't show up in the multi-stamp. Both cases means the chameleon stamp will be able to offer it as a choice.
	var/is_restricted = FALSE

///Returns a displayable version of the owner name for this stamp if available. (Ex: Research departmen, Waffles Inc., etc..)
/decl/stamp_type/proc/get_stamp_display_name()
	if(length(owner_name))
		return "[owner_name]'s stamp"
	return "[name] stamp"

///Return a string explaining that something has been stamped by our stampt symbol.
/decl/stamp_type/proc/get_stamped_message()
	if(!length(stamp_text))
		stamp_text = "stamped by [get_stamp_display_name()]"
	return stamp_text

///Returns the list of attack verbs for the stamp item.
/decl/stamp_type/proc/get_attack_verbs()
	return attack_verbs.Copy()

///Creates the symbol's image for the stamp overlay.
/decl/stamp_type/proc/generate_stamp_overlay()
	return overlay_image('icons/obj/items/rubber_stamps_overlays.dmi', stamp_overlay_state, stamp_color, RESET_COLOR)

///Creates, or get the cached generated stamp overlay symbol.
/decl/stamp_type/proc/get_stamp_overlay()
	if(!stamp_overlay)
		stamp_overlay = generate_stamp_overlay()
	return stamp_overlay

//////////////////////////////////////////////////////////////////////////////////
// Stamp Symbols Definitions
//////////////////////////////////////////////////////////////////////////////////

//----------------------
// --- Default stamp ---
//----------------------
/decl/stamp_type/default
	name = "circle"

//-----------------------
// --- Approved stamp ---
//-----------------------
/decl/stamp_type/approved
	name                = "approved"
	stamp_color_name    = "dark green"
	stamp_color         = "#006600"
	stamp_overlay_state = "stamp-checkmark"
	attack_verbs        = list("stamped", "approved")
//---------------------
// --- Denied stamp ---
//---------------------
/decl/stamp_type/denied
	name                = "denied"
	stamp_color_name    = "dark red"
	stamp_color         = "#a23e3e"
	stamp_overlay_state = "stamp-x"
	attack_verbs        = list("stamped", "denied")

//-----------------
// --- OK stamp ---
//-----------------
/decl/stamp_type/ok
	name                = "ok"
	stamp_color_name    = "dark green"
	stamp_color         = "#006600"
	stamp_overlay_state = "stamp-ok"

//--------------------
// --- Clown stamp ---
//--------------------
/decl/stamp_type/clown
	name                = "clown"
	owner_name          = "clown"
	stamp_color_name    = "pink"
	stamp_overlay_state = "paper_stamp-clown"
	attack_verbs        = list("honk'ed", "got clowned on", "got applied a honk on")

//-------------------
// --- Boss stamp ---
//-------------------
/decl/stamp_type/boss
	name                = "boss"
	owner_name          = "boss"
	stamp_color_name    = "dark green"
	stamp_overlay_state = "paper_stamp-boss"
	attack_verbs        = list("stamped", "got the _BOSS_ seal of approval")
	is_restricted       = TRUE

/decl/stamp_type/boss/Initialize()
	. = ..()
	owner_name = global.using_map.boss_name

/decl/stamp_type/boss/get_attack_verbs()
	var/list/my_verbs = ..()
	//Replace all boss name tokens with the actual boss name
	for(var/index = 1 to length(my_verbs))
		my_verbs[index] = replacetextEx(my_verbs[index], "_BOSS_", "[global.using_map.boss_name]'s'")
	return my_verbs

//-----------------------
// --- Shipping stamp ---
//-----------------------
/decl/stamp_type/shipping
	name                = "shipping"
	stamp_color_name    = "pale yellow"
	stamp_color         = "#ffcc33"
	stamp_overlay_state = "stamp-dots"

//////////////////////////////////////////////////////////////////////////////////
//Stamp Item
//////////////////////////////////////////////////////////////////////////////////

///A rubber stamp item
/obj/item/stamp
	name        = "rubber stamp"
	desc        = "A rubber stamp for stamping important documents."
	icon        = 'icons/obj/items/rubber_stamps.dmi'
	icon_state  = "stamp-deckchief"
	item_state  = "stamp"
	throwforce  = 0
	w_class     = ITEM_SIZE_TINY
	throw_speed = 7
	throw_range = 15
	material    = /decl/material/solid/metal/steel
	matter      = list(
		/decl/material/solid/plastic = MATTER_AMOUNT_REINFORCEMENT,
	)
	attack_verb = list("stamped")

	///The icon state of the stamp overlay applied.
	var/decl/stamp_type/stamp_symbol = /decl/stamp_type/default
	///The maximum amount of usages this stamp gets from a single ink refill. -1 means infinite uses.
	var/ink_max_uses   = -1

/obj/item/stamp/Initialize(ml, material_key)
	. = ..()
	set_extension(src, /datum/extension/tool,
		list(TOOL_STAMP = TOOL_QUALITY_GOOD),
		TOOL_STAMP = list(TOOL_PROP_USES = ink_max_uses))
	if(ispath(stamp_symbol))
		set_stamp_symbol(stamp_symbol)

/obj/item/stamp/proc/set_stamp_symbol(var/decl/stamp_type/_stamp_symbol)
	if(ispath(_stamp_symbol))
		_stamp_symbol = GET_DECL(_stamp_symbol)
	stamp_symbol = _stamp_symbol
	attack_verb  = stamp_symbol.get_attack_verbs()
	set_ink_color(stamp_symbol.stamp_color, stamp_symbol.stamp_color_name)
	set_tool_property(TOOL_STAMP, TOOL_PROP_STAMP_SYMBOL,  stamp_symbol)
	set_tool_property(TOOL_STAMP, TOOL_PROP_STAMP_OVERLAY, stamp_symbol.get_stamp_overlay())
	set_tool_property(TOOL_STAMP, TOOL_PROP_STAMP_MESSAGE, stamp_symbol.get_stamped_message())

/obj/item/stamp/proc/set_ink_color(var/_ink_color, var/_ink_color_name)
	set_tool_property(TOOL_STAMP, TOOL_PROP_COLOR,      _ink_color)
	set_tool_property(TOOL_STAMP, TOOL_PROP_COLOR_NAME, _ink_color_name)

//////////////////////////////////////////////////////////////////////////////////
// Stamp Definitions
//////////////////////////////////////////////////////////////////////////////////

//Shipping Stamp
/obj/item/stamp/shipping
	name         = "shipping rubber stamp"
	icon_state   = "stamp-cargo"
	stamp_symbol = /decl/stamp_type/shipping

//Denied Stamp
/obj/item/stamp/approved
	name         = "\improper APPROVED rubber stamp"
	icon_state   = "stamp-approved"
	stamp_symbol = /decl/stamp_type/approved

//Denied Stamp
/obj/item/stamp/denied
	name         = "\improper DENIED rubber stamp"
	icon_state   = "stamp-deny"
	stamp_symbol = /decl/stamp_type/denied

//Denied Rig Stamp

/obj/item/stamp/denied/rig
	max_health   = ITEM_HEALTH_NO_DAMAGE
	force        = 0
	pickup_sound = null
	drop_sound   = null //Rig will handle sounds if it wants to
	equip_sound  = null
	w_class      = ITEM_SIZE_NO_CONTAINER

//Ok Stamp
/obj/item/stamp/ok
	name         = "\improper OK rubber stamp"
	icon_state   = "stamp-ok"
	stamp_symbol = /decl/stamp_type/ok

//Clown Stamp
/obj/item/stamp/clown
	name        = "clown's rubber stamp"
	icon_state  = "stamp-clown"
	stamp_symbol = /decl/stamp_type/clown

//Boss Stamp
/obj/item/stamp/boss
	name        = "boss' rubber stamp"
	icon_state  = "stamp-boss"
	stamp_symbol = /decl/stamp_type/boss

/obj/item/stamp/boss/Initialize(ml, material_key)
	if(name == initial(name))
		generate_stamp_name()
	. = ..()

/obj/item/stamp/boss/proc/generate_stamp_name()
	//Get the proper boss name
	SetName("[global.using_map.boss_name]'s' rubber stamp")

//Multi Stamp

/obj/item/stamp/multi
	name = "rubber multi-stamp"

/obj/item/stamp/multi/proc/make_stamp_choices_list(var/allow_restricted = FALSE)
	return list("EXIT" = null) + global.get_stamps_types_by_name(allow_restricted) // the list that will be shown to the user to pick from

/obj/item/stamp/multi/proc/ask_stamp_type(var/mob/user, var/list/options, var/question)
	. = input(user, question) in options
	if(QDELETED(src) || QDELETED(user) || . == "EXIT" || !CanUseTopic(user, global.hands_topic_state))
		return null

/obj/item/stamp/multi/attack_self(mob/user)
	var/list/sorted_stamps  = make_stamp_choices_list(FALSE)
	var/input_stamp         = ask_stamp_type(user, sorted_stamps, "Choose a stamp to use.")
	if(!input_stamp)
		return
	set_stamp_symbol(sorted_stamps[capitalize(input_stamp)])

//Rig Variant

/obj/item/stamp/multi/rig
	name         = "rig rubber multi-stamp"
	max_health   = ITEM_HEALTH_NO_DAMAGE
	force        = 0
	pickup_sound = null
	drop_sound   = null //Rig will handle sounds if it wants to
	equip_sound  = null
	w_class      = ITEM_SIZE_NO_CONTAINER

/obj/item/stamp/multi/attack_self(mob/user)
	return //The rig is using attack_self for switch between two stamps, so we need to handle it differently

/obj/item/stamp/multi/rig/get_alt_interactions(mob/user)
	. = ..()
	LAZYADD(., /decl/interaction_handler/rig_pick_stamp)

/decl/interaction_handler/rig_pick_stamp
	name = "Pick a Stamp"
	expected_target_type = /obj/item/stamp/multi/rig

/decl/interaction_handler/rig_pick_stamp/invoked(obj/item/stamp/multi/rig/target, mob/user, obj/item/prop)
	target.attack_self(user)

//Chameleon Stamp

/// Syndicate stamp to forge documents.
/obj/item/stamp/multi/chameleon
	name = "chameleon stamp" //gets replaced after attack self, just a helper for mappers

/obj/item/stamp/multi/chameleon/attack_self(mob/user)
	var/list/sorted_stamps  = make_stamp_choices_list(TRUE)
	var/input_stamp         = ask_stamp_type(user, sorted_stamps, "Choose a stamp to forge.")
	if(!input_stamp)
		return
	set_stamp_symbol(sorted_stamps[capitalize(input_stamp)])

/obj/item/stamp/multi/set_stamp_symbol(decl/stamp_type/_stamp_symbol)
	. = ..()
	if(stamp_symbol)
		SetName(stamp_symbol.get_stamp_display_name()) //Copy over the name, so we know what's currently set

